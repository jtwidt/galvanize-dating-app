{"version":3,"sources":["components/chatlist/styles.js","components/chatlist/ChatList.js","components/dashboard/styles.js","components/chatview/styles.js","components/chatview/ChatView.js","components/chattextbox/styles.js","components/chattextbox/ChatTextBox.js","components/newchat/styles.js","components/newchat/NewChat.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","root","backgroundColor","palette","background","paper","height","position","left","width","boxShadow","listItem","cursor","newChatBtn","borderRadius","unreadMessage","color","top","right","withStyles","props","classes","newChat","chats","length","className","Button","variant","fullWidth","onClick","List","map","chat","index","otherUserId","avatarImg","firstName","lastName","user1_id","currentUser","user2_id","otherUser","allUsers","filter","user","id","avatar","first_name","last_name","key","ListItem","chatIndex","selectChat","selected","selectedChat","alignItems","ListItemAvatar","unread","indexOf","Badge","Avatar","alt","src","ListItemText","primary","Divider","changeUserBtn","bottom","content","overflow","padding","marginLeft","boxSizing","overflowY","userSent","float","clear","wordWrap","marginTop","friendSent","chatHeader","fontSize","textAlign","paddingTop","useEffect","container","document","getElementById","scrollTo","scrollHeight","sender","reciever","msg","msgid","message","sendBtn","chatTextBoxContainer","chatTextBox","useState","chatText","setChatText","submitMessage","messageValid","submitMsg","value","txt","replace","TextField","placeholder","onKeyUp","e","keyCode","target","userTyping","onFocus","messageRead","main","display","spacing","marginRight","breakpoints","up","input","form","submit","errorText","username","setUsername","setMessage","type","submitNewChat","a","preventDefault","userThere","userExists","chatThere","chatExists","createChat","goToChat","newUser","recieverId","existingId","forEach","toLowerCase","exists","CssBaseline","Paper","Typography","component","onSubmit","FormControl","InputLabel","htmlFor","Input","required","autoFocus","onChange","selectedChatId","setSelectedChatId","setChats","currentUserId","setCurrentUserId","setAllUsers","newChatFormVisible","setNewChatFormVisible","setSelectedChat","sendMsg","setSendMsg","rerender","setRerender","setUnread","unreadFlag","setUnreadFlag","rerenderChats","setRerenderChats","sendChat","setSendChat","clickedChatWhereNotSender","axios","put","get","response","data","usersResponse","fetchData","chatResponse","fetchChatData","post","convoId","then","conversation","conversation_id","userId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"8OAuBeA,EAvBA,SAACC,GAAD,MAAY,CACzBC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,WACVC,KAAM,IACNC,MAAO,QACPC,UAAW,qBAEbC,SAAU,CACRC,OAAQ,WAEVC,WAAY,CACVC,aAAc,OAEhBC,cAAe,CACbC,MAAO,MACPT,SAAU,WACVU,IAAK,IACLC,MAAO,S,2BCiFIC,cAAWpB,EAAXoB,EAxFE,SAACC,GAAW,IACnBC,EAAYD,EAAZC,QAEFC,EAAU,WACdF,EAAME,WAOR,OAAIF,EAAMG,MAAMC,OAAS,EAErB,0BAAMC,UAAWJ,EAAQpB,MACvB,kBAACyB,EAAA,EAAD,CACEC,QAAQ,YACRC,WAAS,EACTZ,MAAM,UACNS,UAAWJ,EAAQR,WACnBgB,QAASP,GALX,YASA,kBAACQ,EAAA,EAAD,KACGV,EAAMG,MAAMQ,KAAI,SAACC,EAAMC,GACtB,IAAIC,EACAC,EACAC,EACAC,EAEFH,EADEF,EAAKM,WAAalB,EAAMmB,YACZP,EAAKQ,SAELR,EAAKM,SAErB,IAAIG,EAAYrB,EAAMsB,SAASC,QAC7B,SAACC,GAAD,OAAUA,EAAKC,KAAOX,KAOxB,OALIO,EAAUjB,OAAS,IACrBW,EAAYM,EAAU,GAAGK,OACzBV,EAAYK,EAAU,GAAGM,WACzBV,EAAWI,EAAU,GAAGO,WAGxB,yBAAKC,IAAKjB,EAAKa,IACb,kBAACK,EAAA,EAAD,CACErB,QAAS,kBAtCLsB,EAsCsBnB,EAAKa,QArC7CzB,EAAMgC,WAAWD,GADA,IAACA,GAuCJ1B,UAAWJ,EAAQV,SACnB0C,SAAUjC,EAAMkC,eAAiBtB,EAAKa,GACtCU,WAAW,cAEX,kBAACC,EAAA,EAAD,KACGpC,EAAMqC,OAAOC,QAAQ1B,EAAKa,KAAO,EAChC,kBAACc,EAAA,EAAD,CAAO3C,MAAM,UAAUW,QAAQ,OAC7B,kBAACiC,EAAA,EAAD,CAAQC,IAAI,WAAWC,IAAK3B,KAG9B,kBAACyB,EAAA,EAAD,CAAQC,IAAI,WAAWC,IAAK3B,KAGhC,kBAAC4B,EAAA,EAAD,CACEC,QAAO,UAAK5B,EAAL,YAAkBC,MAG7B,kBAAC4B,EAAA,EAAD,YASV,8BACE,kBAACvC,EAAA,EAAD,CACEC,QAAQ,YACRC,WAAS,EACTZ,MAAM,UACNS,UAAWJ,EAAQR,WACnBgB,QAASP,GALX,YASA,kBAACQ,EAAA,EAAD,U,iBChFO/B,EAdA,SAACC,GAAD,MAAY,CACzBkE,cAAe,CACb3D,SAAU,WACV4D,OAAQ,MACR3D,KAAM,MACNC,MAAO,QACPK,aAAc,MACdZ,gBAAiB,UACjBI,OAAQ,OACRI,UAAW,oBACXM,MAAO,WC2CIjB,EArDA,SAACC,GAAD,MAAY,CACzBoE,QAAS,CACP9D,OAAQ,sBACR+D,SAAU,OACVC,QAAS,OACTC,WAAY,QACZC,UAAW,aACXC,UAAW,SACXxD,IAAK,OACLR,MAAO,qBACPF,SAAU,YAGZmE,SAAU,CACRC,MAAO,OACPC,MAAO,OACPN,QAAS,OACTE,UAAW,aACXK,SAAU,aACVC,UAAW,OACX5E,gBAAiB,UACjBc,MAAO,QACPP,MAAO,QACPK,aAAc,QAGhBiE,WAAY,CACVJ,MAAO,QACPC,MAAO,OACPN,QAAS,OACTE,UAAW,aACXK,SAAU,aACVC,UAAW,OACX5E,gBAAiB,UACjBc,MAAO,QACPP,MAAO,QACPK,aAAc,QAGhBkE,WAAY,CACVvE,MAAO,qBACPH,OAAQ,OACRJ,gBAAiB,UACjBK,SAAU,QACVgE,WAAY,QACZU,SAAU,OACVC,UAAW,SACXlE,MAAO,QACPmE,WAAY,OACZX,UAAW,gBCAArD,cAAWpB,EAAXoB,EA7CE,SAACC,GAAW,IACnBC,EAAiDD,EAAjDC,QAASiC,EAAwClC,EAAxCkC,aAAcf,EAA0BnB,EAA1BmB,YAAaG,EAAatB,EAAbsB,SAS5C,GAPA0C,qBAAU,WACR,IAAMC,EAAYC,SAASC,eAAe,sBACtCF,GACFA,EAAUG,SAAS,EAAGH,EAAUI,iBAIf,OAAjBnC,EAAuB,CACzB,IAAIpB,EACFoB,EAAa,GAAGoC,SAAWnD,EACvBe,EAAa,GAAGqC,SAChBrC,EAAa,GAAGoC,OACtB,OACE,6BACE,yBAAKjE,UAAWJ,EAAQ2D,YAAxB,yBACyB,IACtBtC,EAASC,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOX,KAAa,GAAGa,WAAY,IAClEL,EAASC,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOX,KAAa,GAAGc,WAEzD,0BAAMH,GAAG,qBAAqBpB,UAAWJ,EAAQ+C,SAC9Cd,EAAavB,KAAI,SAAC6D,GACjB,OACE,yBACE3C,IAAK2C,EAAIC,MACTpE,UACEmE,EAAIF,SAAWnD,EACXlB,EAAQqD,SACRrD,EAAQ0D,YAGba,EAAIE,cAQjB,OAAO,0BAAMrE,UAAWJ,EAAQ+C,QAASvB,GAAG,0B,0BCtBjC9C,EAvBA,SAACC,GAAD,MAAY,CACzB+F,QAAS,CACP/E,MAAO,OACPJ,OAAQ,UACR,UAAW,CACTI,MAAO,SAIXgF,qBAAsB,CACpBzF,SAAU,WACV4D,OAAQ,OACR3D,KAAM,QACNgE,UAAW,aACXH,SAAU,OACV5D,MAAO,6BAGTwF,YAAa,CACXxF,MAAO,uBC0BIU,cAAWpB,EAAXoB,EAvCK,SAACC,GAAW,IACtBC,EAAYD,EAAZC,QADqB,EAEG6E,mBAAS,IAFZ,mBAEtBC,EAFsB,KAEZC,EAFY,KAYvBC,EAAgB,WACpB,GAAIC,EAAaH,GAAW,CAC1B,IAAIjE,EACFd,EAAMkC,aAAa,GAAGoC,SAAWtE,EAAMmB,YACnCnB,EAAMkC,aAAa,GAAGqC,SACtBvE,EAAMkC,aAAa,GAAGoC,OAC5BtE,EAAMmF,UAAUJ,EAAUjE,GAC1BoD,SAASC,eAAe,eAAeiB,MAAQ,KAI7CF,EAAe,SAACG,GAAD,OAASA,GAAOA,EAAIC,QAAQ,MAAO,IAAIlF,QAE5D,OACE,yBAAKC,UAAWJ,EAAQ2E,sBACtB,kBAACW,EAAA,EAAD,CACEC,YAAY,uBACZC,QAAS,SAACC,GAAD,OAzBI,SAACA,GACJ,KAAdA,EAAEC,QAAiBV,IAAkBD,EAAYU,EAAEE,OAAOR,OAwBtCS,CAAWH,IAC3BjE,GAAG,cACHpB,UAAWJ,EAAQ4E,YACnBiB,QAxBmB,WACvB9F,EAAM+F,iBAyBJ,kBAAC,IAAD,CAAMtF,QAASwE,EAAe5E,UAAWJ,EAAQ0E,c,6DCLxChG,EAnCA,SAACC,GAAD,MAAY,CACzBoH,KAAK,aACH3G,MAAO,OACP4G,QAAS,QACT9C,WAA8B,EAAlBvE,EAAMsH,UAClBC,YAA+B,EAAlBvH,EAAMsH,WAClBtH,EAAMwH,YAAYC,GAAG,IAAwB,EAAlBzH,EAAMsH,UAAgB,GAAK,CACrD7G,MAAO,IACP8D,WAAY,OACZgD,YAAa,SAGjBlH,MAAO,CACLiE,QAAQ,GAAD,OAAuB,EAAlBtE,EAAMsH,UAAX,cAAgD,EAAlBtH,EAAMsH,UAApC,cACa,EAAlBtH,EAAMsH,UADD,MAGP/G,SAAU,WACVE,MAAO,QACPQ,IAAK,OACLT,KAAM,6BAERkH,MAAO,GACPC,KAAM,CACJlH,MAAO,OACPqE,UAAW9E,EAAMsH,WAEnBM,OAAQ,CACN9C,UAA6B,EAAlB9E,EAAMsH,WAEnBO,UAAW,CACT7G,MAAO,MACPkE,UAAW,YC2FA/D,cAAWpB,EAAXoB,EA7GC,SAACC,GAAW,IAClBC,EAAYD,EAAZC,QADiB,EAEO6E,mBAAS,MAFhB,mBAElB4B,EAFkB,KAERC,EAFQ,OAGK7B,mBAAS,MAHd,mBAGlBJ,EAHkB,KAGTkC,EAHS,KAKnBf,EAAa,SAACgB,EAAMnB,GACxB,OAAQmB,GACN,IAAK,WACHF,EAAYjB,EAAEE,OAAOR,OACrB,MACF,IAAK,UACHwB,EAAWlB,EAAEE,OAAOR,SAKpB0B,EAAa,uCAAG,WAAOpB,GAAP,iBAAAqB,EAAA,sDACpBrB,EAAEsB,iBAGgB,QAFdC,EAAYC,OAII,QADlBC,EAAYC,EAAWH,IAErBI,EAAWJ,GAEXK,EAASH,EAAWF,IATJ,2CAAH,sDAcbI,EAAa,SAACE,GAClBvH,EAAM8G,cAAc,CAClBxC,OAAQtE,EAAMmB,YACdoD,SAAUgD,EACV7C,QAASA,KAIP4C,EAAW,SAACzG,EAAO2G,GACvBxH,EAAMsH,SAASzG,EAAO2G,EAAY9C,IAG9BwC,EAAa,WACjB,IAAIO,EAAa,KAOjB,OANAzH,EAAMsB,SAASoG,SAAQ,SAAClG,GACV,UAAMA,EAAKG,WAAX,YAAyBH,EAAKI,WAC7B+F,gBAAkBjB,EAASiB,gBACtCF,EAAajG,EAAKC,OAGfgG,GAGHL,EAAa,SAACI,GAClB,IAAII,EAAS,KAMb,OALA5H,EAAMG,MAAMuH,SAAQ,SAAC9G,GACfA,EAAKM,WAAasG,GAAc5G,EAAKQ,WAAaoG,IACpDI,EAAShH,EAAKa,OAGXmG,GAGT,OACE,0BAAMvH,UAAWJ,EAAQ+F,MACvB,kBAAC6B,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAOzH,UAAWJ,EAAQhB,OACxB,kBAAC8I,EAAA,EAAD,CAAYC,UAAU,KAAKzH,QAAQ,MAAnC,mBAGA,0BAAMF,UAAWJ,EAAQsG,KAAM0B,SAAU,SAACvC,GAAD,OAAOoB,EAAcpB,KAC5D,kBAACwC,EAAA,EAAD,CAAa1H,WAAS,GACpB,kBAAC2H,EAAA,EAAD,CAAYC,QAAQ,qBAApB,6BAGA,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRjI,UAAWJ,EAAQqG,MACnBiC,WAAS,EACTC,SAAU,SAAC9C,GAAD,OAAOG,EAAW,WAAYH,IACxCjE,GAAG,uBAGP,kBAACyG,EAAA,EAAD,CAAa1H,WAAS,GACpB,kBAAC2H,EAAA,EAAD,CAAYC,QAAQ,oBAApB,sBAGA,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRjI,UAAWJ,EAAQqG,MACnBkC,SAAU,SAAC9C,GAAD,OAAOG,EAAW,UAAWH,IACvCjE,GAAG,sBAGP,kBAACnB,EAAA,EAAD,CACEE,WAAS,EACTH,UAAWJ,EAAQuG,OACnBjG,QAAQ,YACRX,MAAM,UACNiH,KAAK,UALP,gBC2FK9G,cAAWpB,EAAXoB,EA7LG,SAACC,GAAW,IAAD,EACiB8E,mBAAS,MAD1B,mBACpB2D,EADoB,KACJC,EADI,OAED5D,mBAAS,IAFR,mBAEpB3E,EAFoB,KAEbwI,EAFa,OAGe7D,mBAAS,GAHxB,mBAGpB8D,EAHoB,KAGLC,EAHK,OAIK/D,mBAAS,IAJd,mBAIpBxD,EAJoB,KAIVwH,EAJU,OAKyBhE,oBAAS,GALlC,mBAKpBiE,EALoB,KAKAC,EALA,OAMalE,mBAAS,MANtB,mBAMpB5C,EANoB,KAMN+G,EANM,OAOGnE,mBAAS,MAPZ,mBAOpBoE,EAPoB,KAOXC,EAPW,OAQKrE,oBAAS,GARd,mBAQpBsE,EARoB,KAQVC,EARU,OASCvE,mBAAS,IATV,mBASpBzC,EAToB,KASZiH,EATY,OAUSxE,oBAAS,GAVlB,mBAUpByE,EAVoB,KAURC,EAVQ,OAWe1E,oBAAS,GAXxB,mBAWpB2E,GAXoB,KAWLC,GAXK,QAYK5E,mBAAS,IAZd,qBAYpB6E,GAZoB,MAYVC,GAZU,MAcrB5H,GAAa,SAACD,GAClB2G,EAAkB3G,GAClB2H,IAAiB,GACjBL,GAAY,GACZtD,MAuBIA,GAAc,WACK,OAAnB0C,GAP4B,WAChC,GAAqB,OAAjBvG,EACF,OAAOA,EAAaA,EAAa9B,OAAS,GAAGmE,WAAaqE,EAMtDiB,IACFC,IAAMC,IAAN,wBAA2BtB,EAA3B,YAA6CG,GAAiB,MAGlEY,GAAc,IAGVrE,GAAY,SAACX,EAAK1D,GAMtBqI,EALa,CACX7E,OAAQsE,EACRrE,SAAUzD,EACV4D,QAASF,KAuBbR,qBACE,YACwB,IAAlByF,IACa,uCAAG,8BAAA1C,EAAA,sEACO+C,IAAME,IAAN,2BAA8BpB,IADrC,cACVqB,EADU,OAEhBtB,EAASsB,EAASC,MAFF,SAGYJ,IAAME,IAAI,UAHtB,OAGVG,EAHU,OAIhBrB,EAAYqB,EAAcD,MAJV,2CAAH,oDAMfE,KAGJ,CAACxB,GACD,CAACa,KAGHzF,qBAAU,WACe,OAAnByE,IAAwC,IAAbW,IACV,uCAAG,4BAAArC,EAAA,sEACO+C,IAAME,IAAN,wBAA2BvB,IADlC,OACd4B,EADc,OAEpBpB,EAAgBoB,EAAaH,MAFT,2CAAH,oDAInBI,GACAjB,GAAY,MAEb,CAACZ,EAAgBW,IAEpBpF,qBAAU,WACQ,OAAZkF,IACFY,IAAMS,KAAN,wBAA4B9B,GAAkBS,GAC9CC,EAAW,MACXE,GAAY,MAEb,CAACH,IAEJlF,qBAAU,WACR,IAAIwG,EACa,OAAbb,IACFG,IAAMS,KAAN,iBAA6BZ,IAAUc,MAAK,SAACR,GAC3CO,EAAUP,EAASC,KACnBN,GAAY,MACZ5H,GAAWwI,QAGd,CAACb,KAEJ3F,qBAAU,YACW,IAAfuF,IACa,uCAAG,4BAAAxC,EAAA,sEACO+C,IAAME,IAAN,sBAAyBpB,IADhC,OACVqB,EADU,OAEhBX,EACEW,EAASC,KAAKvJ,KAAI,SAAC+J,GAAD,OAAkBA,EAAaC,oBAHnC,2CAAH,oDAMfP,GACAZ,GAAc,MAEf,CAACD,IAtIuB,IAwInBtJ,GAAYD,EAAZC,QAER,OAAIqB,IAAa,IAAMnB,IAAU,GACxB,KAGL,6BACE,kBAAC,EAAD,CACE6B,WAAYA,GACZ7B,MAAOA,EACP+B,aAAcuG,EACdtH,YAAayH,EACbtH,SAAUA,EACVe,OAAQA,EACRnC,QA3FQ,WACd8I,GAAsB,GACtBN,EAAkB,MAClBO,EAAgB,SA0FXF,EAAqB,KACpB,kBAAC,EAAD,CACE5H,YAAayH,EACb1G,aAAcA,EACdZ,SAAUA,IAGI,OAAjBY,GAA0B6G,EAOvB,KANF,kBAAC,EAAD,CACE5D,UAAWA,GACXY,YAAaA,GACb5E,YAAayH,EACb1G,aAAcA,IAGjB6G,EACC,kBAAC,EAAD,CACEzH,SAAUA,EACVnB,MAAOA,EACPgB,YAAayH,EACb9B,cA3GY,SAAC5G,GACrB0J,GAAY1J,GACZwJ,IAAiB,GACjBV,GAAsB,IAyGd1B,SAtGO,SAACvF,EAAWyF,EAAY9C,GACvCgE,EAAkB3G,GAClBoD,GAAUT,EAAS8C,GACnBwB,GAAsB,MAqGd,KACJ,kBAAC1I,EAAA,EAAD,CACEC,QAAQ,YACRX,MAAM,UACNa,QA9JW,SAACmK,GAEhB/B,EADoB,IAAlBD,EACe,EAEA,GAEnBK,EAAgB,MAChBP,EAAkB,MAClBgB,IAAiB,GACjBL,GAAY,GACZC,EAAU,IACVE,GAAc,IAoJRnJ,UAAWJ,GAAQ6C,eAJrB,mBC9KO+H,MARf,WACE,OACE,yBAAKxK,UAAU,OACb,kBAAC,EAAD,QCMcyK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnH,SAASC,eAAe,SDyHpB,kBAAmBmH,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlH,a","file":"static/js/main.3c06b5c1.chunk.js","sourcesContent":["const styles = (theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: 'calc(100% - 35px)',\n    position: 'absolute',\n    left: '0',\n    width: '300px',\n    boxShadow: '0px 0px 2px black',\n  },\n  listItem: {\n    cursor: 'pointer',\n  },\n  newChatBtn: {\n    borderRadius: '0px',\n  },\n  unreadMessage: {\n    color: 'red',\n    position: 'absolute',\n    top: '0',\n    right: '5px',\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport styles from './styles';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport { Badge } from '@material-ui/core';\n\nconst ChatList = (props) => {\n  const { classes } = props;\n\n  const newChat = () => {\n    props.newChat();\n  };\n\n  const selectChat = (chatIndex) => {\n    props.selectChat(chatIndex);\n  };\n\n  if (props.chats.length > 0) {\n    return (\n      <main className={classes.root}>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          color=\"primary\"\n          className={classes.newChatBtn}\n          onClick={newChat}\n        >\n          New Chat\n        </Button>\n        <List>\n          {props.chats.map((chat, index) => {\n            let otherUserId;\n            let avatarImg;\n            let firstName;\n            let lastName;\n            if (chat.user1_id === props.currentUser) {\n              otherUserId = chat.user2_id;\n            } else {\n              otherUserId = chat.user1_id;\n            }\n            let otherUser = props.allUsers.filter(\n              (user) => user.id === otherUserId\n            );\n            if (otherUser.length > 0) {\n              avatarImg = otherUser[0].avatar;\n              firstName = otherUser[0].first_name;\n              lastName = otherUser[0].last_name;\n            }\n            return (\n              <div key={chat.id}>\n                <ListItem\n                  onClick={() => selectChat(chat.id)}\n                  className={classes.listItem}\n                  selected={props.selectedChat === chat.id}\n                  alignItems=\"flex-start\"\n                >\n                  <ListItemAvatar>\n                    {props.unread.indexOf(chat.id) > -1 ? (\n                      <Badge color=\"primary\" variant=\"dot\">\n                        <Avatar alt=\"Joe Kerr\" src={avatarImg} />\n                      </Badge>\n                    ) : (\n                      <Avatar alt=\"Joe Kerr\" src={avatarImg} />\n                    )}\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={`${firstName} ${lastName}`}\n                  ></ListItemText>\n                </ListItem>\n                <Divider></Divider>\n              </div>\n            );\n          })}\n        </List>\n      </main>\n    );\n  } else {\n    return (\n      <main>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          color=\"primary\"\n          className={classes.newChatBtn}\n          onClick={newChat}\n        >\n          New Chat\n        </Button>\n        <List></List>\n      </main>\n    );\n  }\n};\n\nexport default withStyles(styles)(ChatList);\n","const styles = (theme) => ({\n  changeUserBtn: {\n    position: 'absolute',\n    bottom: '0px',\n    left: '0px',\n    width: '300px',\n    borderRadius: '0px',\n    backgroundColor: '#227092',\n    height: '35px',\n    boxShadow: '0px 0px 2px black',\n    color: 'white',\n  },\n});\n\nexport default styles;\n","const styles = (theme) => ({\n  content: {\n    height: 'calc(100vh - 100px)',\n    overflow: 'auto',\n    padding: '25px',\n    marginLeft: '300px',\n    boxSizing: 'border-box',\n    overflowY: 'scroll',\n    top: '50px',\n    width: 'calc(100% - 300px)',\n    position: 'absolute',\n  },\n\n  userSent: {\n    float: 'left',\n    clear: 'both',\n    padding: '20px',\n    boxSizing: 'border-box',\n    wordWrap: 'break-word',\n    marginTop: '10px',\n    backgroundColor: '#707BC4',\n    color: 'white',\n    width: '300px',\n    borderRadius: '10px',\n  },\n\n  friendSent: {\n    float: 'right',\n    clear: 'both',\n    padding: '20px',\n    boxSizing: 'border-box',\n    wordWrap: 'break-word',\n    marginTop: '10px',\n    backgroundColor: '#707BC4',\n    color: 'white',\n    width: '300px',\n    borderRadius: '10px',\n  },\n\n  chatHeader: {\n    width: 'calc(100% - 301px)',\n    height: '50px',\n    backgroundColor: '#344195',\n    position: 'fixed',\n    marginLeft: '301px',\n    fontSize: '18px',\n    textAlign: 'center',\n    color: 'white',\n    paddingTop: '10px',\n    boxSizing: 'border-box',\n  },\n});\n\nexport default styles;\n","import React, { useEffect } from 'react';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst ChatView = (props) => {\n  const { classes, selectedChat, currentUser, allUsers } = props;\n\n  useEffect(() => {\n    const container = document.getElementById('chatview-container');\n    if (container) {\n      container.scrollTo(0, container.scrollHeight);\n    }\n  });\n\n  if (selectedChat !== null) {\n    let otherUserId =\n      selectedChat[0].sender === currentUser\n        ? selectedChat[0].reciever\n        : selectedChat[0].sender;\n    return (\n      <div>\n        <div className={classes.chatHeader}>\n          Your conversation with{' '}\n          {allUsers.filter((user) => user.id === otherUserId)[0].first_name}{' '}\n          {allUsers.filter((user) => user.id === otherUserId)[0].last_name}\n        </div>\n        <main id=\"chatview-container\" className={classes.content}>\n          {selectedChat.map((msg) => {\n            return (\n              <div\n                key={msg.msgid}\n                className={\n                  msg.sender === currentUser\n                    ? classes.userSent\n                    : classes.friendSent\n                }\n              >\n                {msg.message}\n              </div>\n            );\n          })}\n        </main>\n      </div>\n    );\n  } else {\n    return <main className={classes.content} id=\"chatview-container\"></main>;\n  }\n};\n\nexport default withStyles(styles)(ChatView);\n","const styles = (theme) => ({\n  sendBtn: {\n    color: 'blue',\n    cursor: 'pointer',\n    '&:hover': {\n      color: 'gray',\n    },\n  },\n\n  chatTextBoxContainer: {\n    position: 'absolute',\n    bottom: '15px',\n    left: '315px',\n    boxSizing: 'border-box',\n    overflow: 'auto',\n    width: 'calc(100% - 300px - 50px)',\n  },\n\n  chatTextBox: {\n    width: 'calc(100% - 75px)',\n  },\n});\n\nexport default styles;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Send from '@material-ui/icons/Send';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst ChatTextBox = (props) => {\n  const { classes } = props;\n  const [chatText, setChatText] = useState('');\n\n  const userTyping = (e) => {\n    e.keyCode === 13 ? submitMessage() : setChatText(e.target.value);\n  };\n\n  const userClickedInput = () => {\n    props.messageRead();\n  };\n\n  const submitMessage = () => {\n    if (messageValid(chatText)) {\n      let otherUserId =\n        props.selectedChat[0].sender === props.currentUser\n          ? props.selectedChat[0].reciever\n          : props.selectedChat[0].sender;\n      props.submitMsg(chatText, otherUserId);\n      document.getElementById('chattextbox').value = '';\n    }\n  };\n\n  const messageValid = (txt) => txt && txt.replace(/\\s/g, '').length;\n\n  return (\n    <div className={classes.chatTextBoxContainer}>\n      <TextField\n        placeholder=\"Type your message...\"\n        onKeyUp={(e) => userTyping(e)}\n        id=\"chattextbox\"\n        className={classes.chatTextBox}\n        onFocus={userClickedInput}\n      ></TextField>\n      <Send onClick={submitMessage} className={classes.sendBtn}></Send>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(ChatTextBox);\n","const styles = (theme) => ({\n  main: {\n    width: 'auto',\n    display: 'block', // Fix IE 11 issue.\n    marginLeft: theme.spacing() * 3,\n    marginRight: theme.spacing() * 3,\n    [theme.breakpoints.up(400 + theme.spacing() * 3 * 2)]: {\n      width: 400,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    padding: `${theme.spacing() * 2}px ${theme.spacing() * 3}px ${\n      theme.spacing() * 3\n    }px`,\n    position: 'absolute',\n    width: '350px',\n    top: '50px',\n    left: 'calc(50% + 150px - 175px)',\n  },\n  input: {},\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(),\n  },\n  submit: {\n    marginTop: theme.spacing() * 3,\n  },\n  errorText: {\n    color: 'red',\n    textAlign: 'center',\n  },\n});\n\nexport default styles;\n","import React, { useState } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Input,\n  Button,\n  Paper,\n  withStyles,\n  CssBaseline,\n  Typography,\n} from '@material-ui/core';\nimport styles from './styles';\n\nconst NewChat = (props) => {\n  const { classes } = props;\n  const [username, setUsername] = useState(null);\n  const [message, setMessage] = useState(null);\n\n  const userTyping = (type, e) => {\n    switch (type) {\n      case 'username':\n        setUsername(e.target.value);\n        break;\n      case 'message':\n        setMessage(e.target.value);\n        break;\n    }\n  };\n\n  const submitNewChat = async (e) => {\n    e.preventDefault();\n    let userThere = userExists();\n    let chatThere;\n    if (userThere !== null) {\n      chatThere = chatExists(userThere);\n      if (chatThere === null) {\n        createChat(userThere);\n      } else {\n        goToChat(chatThere, userThere);\n      }\n    }\n  };\n\n  const createChat = (newUser) => {\n    props.submitNewChat({\n      sender: props.currentUser,\n      reciever: newUser,\n      message: message,\n    });\n  };\n\n  const goToChat = (index, recieverId) => {\n    props.goToChat(index, recieverId, message);\n  };\n\n  const userExists = () => {\n    let existingId = null;\n    props.allUsers.forEach((user) => {\n      let fullName = `${user.first_name} ${user.last_name}`;\n      if (fullName.toLowerCase() === username.toLowerCase()) {\n        existingId = user.id;\n      }\n    });\n    return existingId;\n  };\n\n  const chatExists = (recieverId) => {\n    let exists = null;\n    props.chats.forEach((chat) => {\n      if (chat.user1_id === recieverId || chat.user2_id === recieverId) {\n        exists = chat.id;\n      }\n    });\n    return exists;\n  };\n\n  return (\n    <main className={classes.main}>\n      <CssBaseline></CssBaseline>\n      <Paper className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Send A Message!\n        </Typography>\n        <form className={classes.form} onSubmit={(e) => submitNewChat(e)}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"new-chat-username\">\n              Enter the name to message\n            </InputLabel>\n            <Input\n              required\n              className={classes.input}\n              autoFocus\n              onChange={(e) => userTyping('username', e)}\n              id=\"new-chat-username\"\n            ></Input>\n          </FormControl>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"new-chat-message\">\n              Enter your message\n            </InputLabel>\n            <Input\n              required\n              className={classes.input}\n              onChange={(e) => userTyping('message', e)}\n              id=\"new-chat-message\"\n            ></Input>\n          </FormControl>\n          <Button\n            fullWidth\n            className={classes.submit}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </form>\n      </Paper>\n    </main>\n  );\n};\n\nexport default withStyles(styles)(NewChat);\n","import React, { useState, useEffect } from 'react';\nimport ChatList from '../chatlist/ChatList';\nimport axios from 'axios';\nimport { Button, withStyles } from '@material-ui/core';\nimport styles from './styles';\nimport ChatView from '../chatview/ChatView';\nimport ChatTextBox from '../chattextbox/ChatTextBox';\nimport NewChat from '../newchat/NewChat';\n\nconst Dashboard = (props) => {\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const [chats, setChats] = useState([]);\n  const [currentUserId, setCurrentUserId] = useState(1);\n  const [allUsers, setAllUsers] = useState([]);\n  const [newChatFormVisible, setNewChatFormVisible] = useState(false);\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [sendMsg, setSendMsg] = useState(null);\n  const [rerender, setRerender] = useState(true);\n  const [unread, setUnread] = useState([]);\n  const [unreadFlag, setUnreadFlag] = useState(true);\n  const [rerenderChats, setRerenderChats] = useState(true);\n  const [sendChat, setSendChat] = useState({});\n\n  const selectChat = (chatIndex) => {\n    setSelectedChatId(chatIndex);\n    setRerenderChats(true);\n    setRerender(true);\n    messageRead();\n  };\n\n  const changeUser = (userId) => {\n    if (currentUserId === 1) {\n      setCurrentUserId(5);\n    } else {\n      setCurrentUserId(1);\n    }\n    setSelectedChat(null);\n    setSelectedChatId(null);\n    setRerenderChats(true);\n    setRerender(true);\n    setUnread([]);\n    setUnreadFlag(true);\n  };\n\n  const clickedChatWhereNotSender = () => {\n    if (selectedChat !== null) {\n      return selectedChat[selectedChat.length - 1].reciever === currentUserId;\n    }\n  };\n\n  const messageRead = () => {\n    if (selectedChatId !== null) {\n      if (clickedChatWhereNotSender()) {\n        axios.put(`/api/messages/${selectedChatId}/${currentUserId}`, null);\n      }\n    }\n    setUnreadFlag(true);\n  };\n\n  const submitMsg = (msg, otherUserId) => {\n    let msgObj = {\n      sender: currentUserId,\n      reciever: otherUserId,\n      message: msg,\n    };\n    setSendMsg(msgObj);\n  };\n\n  const newChat = () => {\n    setNewChatFormVisible(true);\n    setSelectedChatId(null);\n    setSelectedChat(null);\n  };\n\n  const submitNewChat = (newChat) => {\n    setSendChat(newChat);\n    setRerenderChats(true);\n    setNewChatFormVisible(false);\n  };\n\n  const goToChat = (chatIndex, recieverId, message) => {\n    setSelectedChatId(chatIndex);\n    submitMsg(message, recieverId);\n    setNewChatFormVisible(false);\n  };\n\n  useEffect(\n    () => {\n      if (rerenderChats === true) {\n        const fetchData = async () => {\n          const response = await axios.get(`/api/messageList/${currentUserId}`);\n          setChats(response.data);\n          const usersResponse = await axios.get('/users');\n          setAllUsers(usersResponse.data);\n        };\n        fetchData();\n      }\n    },\n    [currentUserId],\n    [rerenderChats]\n  );\n\n  useEffect(() => {\n    if (selectedChatId !== null && rerender === true) {\n      const fetchChatData = async () => {\n        const chatResponse = await axios.get(`/api/messages/${selectedChatId}`);\n        setSelectedChat(chatResponse.data);\n      };\n      fetchChatData();\n      setRerender(false);\n    }\n  }, [selectedChatId, rerender]);\n\n  useEffect(() => {\n    if (sendMsg !== null) {\n      axios.post(`/api/messages/${selectedChatId}`, sendMsg);\n      setSendMsg(null);\n      setRerender(true);\n    }\n  }, [sendMsg]);\n\n  useEffect(() => {\n    let convoId;\n    if (sendChat !== null) {\n      axios.post(`/api/messages/`, sendChat).then((response) => {\n        convoId = response.data;\n        setSendChat(null);\n        selectChat(convoId);\n      });\n    }\n  }, [sendChat]);\n\n  useEffect(() => {\n    if (unreadFlag === true) {\n      const fetchData = async () => {\n        const response = await axios.get(`/api/unread/${currentUserId}`);\n        setUnread(\n          response.data.map((conversation) => conversation.conversation_id)\n        );\n      };\n      fetchData();\n      setUnreadFlag(false);\n    }\n  }, [unreadFlag]);\n\n  const { classes } = props;\n\n  if (allUsers === [] && chats === []) {\n    return null;\n  } else {\n    return (\n      <div>\n        <ChatList\n          selectChat={selectChat}\n          chats={chats}\n          selectedChat={selectedChatId}\n          currentUser={currentUserId}\n          allUsers={allUsers}\n          unread={unread}\n          newChat={newChat}\n        ></ChatList>\n        {newChatFormVisible ? null : (\n          <ChatView\n            currentUser={currentUserId}\n            selectedChat={selectedChat}\n            allUsers={allUsers}\n          ></ChatView>\n        )}\n        {selectedChat !== null && !newChatFormVisible ? (\n          <ChatTextBox\n            submitMsg={submitMsg}\n            messageRead={messageRead}\n            currentUser={currentUserId}\n            selectedChat={selectedChat}\n          ></ChatTextBox>\n        ) : null}\n        {newChatFormVisible ? (\n          <NewChat\n            allUsers={allUsers}\n            chats={chats}\n            currentUser={currentUserId}\n            submitNewChat={submitNewChat}\n            goToChat={goToChat}\n          ></NewChat>\n        ) : null}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={changeUser}\n          className={classes.changeUserBtn}\n        >\n          Change User\n        </Button>\n      </div>\n    );\n  }\n};\n\nexport default withStyles(styles)(Dashboard);\n","import React from 'react';\nimport Dashboard from './components/dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard></Dashboard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}